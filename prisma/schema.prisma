// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  uuid                   String     @id @default(uuid())
  name                   String     @db.VarChar(255)
  email                  String     @unique @db.VarChar(255)
  password               String     @db.VarChar(255)
  resetPasswordToken     String?    @db.VarChar(255)
  passwordTokenExpiresIn DateTime?  @default(now())
  phone                  String?    @db.VarChar(15)
  cpf                    String     @unique @db.VarChar(11)
  cep                    String     @db.VarChar(9)
  state                  String     @db.VarChar(4)
  city                   String     @db.VarChar(50)
  street                 String     @db.VarChar(255)
  number                 String     @db.VarChar(100)
  isAdm                  Boolean    @default(false)
  code                   String?     @db.VarChar(255)
  cart                   Cart[]
  products               Product[]
  comments               Comments[]

  @@map("user")
}

model Product {
  uuid               String              @id @default(uuid())
  title              String              @db.VarChar(255)
  description        String              @db.Text()
  price              Float
  rating             Float?
  sex                Sex
  created_at         DateTime            @default(now())
  updated_at         DateTime?           @default(now())
  cart               Cart[]
  user               User                @relation(fields: [user_author], references: [uuid], onDelete: Cascade)
  user_author        String
  product_themes     ProductThemes[]
  product_images     ImagesProduct[]
  product_categories ProductCategories[]
  stock              Int      
  comments           Comments[]
  product_sizes      ProductSizes[]
  product_colors     ProductColors[]

  @@map("product")
}

model Categories {
  uuid               String              @id @default(uuid())
  category           String?             @db.VarChar(255)
  product_categories ProductCategories[]

  @@map("categories")
}

model ProductCategories {
  uuid          String      @id @default(uuid())
  product       Product?    @relation(fields: [product_uuid], references: [uuid], onDelete: Cascade)
  product_uuid  String?
  categories    Categories? @relation(fields: [category_uuid], references: [uuid], onDelete: Cascade)
  category_uuid String?

  @@map("product_categories")
}

model Cart {
  uuid         String   @id @default(uuid())
  quantity     Int
  user         User?    @relation(fields: [user_uuid], references: [uuid], onDelete: Cascade)
  user_uuid    String?
  product      Product? @relation(fields: [product_uuid], references: [uuid], onDelete: Cascade)
  product_uuid String?

  @@map("cart")
}

model ImagesProduct {
  uuid         String   @id @default(uuid())
  images_url   String   @db.VarChar(255)
  product      Product? @relation(fields: [product_uuid], references: [uuid], onDelete: Cascade)
  product_uuid String?

  @@map("images_product")
}

model Comments {
  uuid         String    @id @default(uuid())
  comment      String?   @db.Text()
  rating       Int?      
  created_at   DateTime  @default(now())
  updated_at   DateTime? @default(now())
  product      Product?  @relation(fields: [product_uuid], references: [uuid], onDelete: Cascade)
  product_uuid String?
  user         User      @relation(fields: [user_uuid], references: [uuid], onDelete: Cascade)
  user_uuid    String

  @@map("comments")
}

model Sizes {
  uuid         String         @id @default(uuid())
  size         String?        @db.VarChar(4)
  productSizes ProductSizes[]

  @@map("sizes")
}

model ProductSizes {
  uuid         String   @id @default(uuid())
  size         Sizes?   @relation(fields: [size_uuid], references: [uuid], onDelete: Cascade)
  size_uuid    String?
  product      Product? @relation(fields: [product_uuid], references: [uuid], onDelete: Cascade)
  product_uuid String?

  @@map("product_sizes")
}

model Colors {
  uuid          String          @id @default(uuid())
  color         String?         @db.VarChar(155)
  colorsProduct ProductColors[]

  @@map("colors")
}

model ProductColors {
  uuid         String   @id @default(uuid())
  color        Colors?  @relation(fields: [color_uuid], references: [uuid], onDelete: Cascade)
  color_uuid   String?
  product      Product? @relation(fields: [product_uuid], references: [uuid], onDelete: Cascade)
  product_uuid String?

  @@map("product_colors")
}

model Themes {
  uuid           String          @id @default(uuid())
  theme          String?          @db.VarChar(155)
  themes_product ProductThemes[]

  @@map("themes")
}

model ProductThemes {
  uuid         String   @id @default(uuid())
  theme        Themes?  @relation(fields: [theme_uuid], references: [uuid], onDelete: Cascade)
  theme_uuid   String?
  product      Product? @relation(fields: [product_uuid], references: [uuid], onDelete: Cascade)
  product_uuid String?

  @@map("product_themes")
}

enum Sex {
  Masculino
  Feminino
  Unisex
}
